[{"/Users/ictus/project1/notice-board/client/src/index.js":"1","/Users/ictus/project1/notice-board/client/src/App.js":"2","/Users/ictus/project1/notice-board/client/src/components/Selected/Selected.js":"3","/Users/ictus/project1/notice-board/client/src/components/TextEditor/TextEditor.js":"4","/Users/ictus/project1/notice-board/client/src/components/Board/Board.js":"5","/Users/ictus/project1/notice-board/client/src/routes/Home/Home.js":"6","/Users/ictus/project1/notice-board/client/src/routes/Read/Read.js":"7","/Users/ictus/project1/notice-board/client/src/routes/NotFound/NotFound.js":"8","/Users/ictus/project1/notice-board/client/src/components/Navigation/Navigation.js":"9","/Users/ictus/project1/notice-board/client/src/components/Auth/Auth.js":"10","/Users/ictus/project1/notice-board/client/src/service/auth.js":"11","/Users/ictus/project1/notice-board/client/src/db/token.js":"12"},{"size":461,"mtime":1637717492301,"results":"13","hashOfConfig":"14"},{"size":1004,"mtime":1637720620567,"results":"15","hashOfConfig":"14"},{"size":3004,"mtime":1637196659949,"results":"16","hashOfConfig":"14"},{"size":3933,"mtime":1637653131391,"results":"17","hashOfConfig":"14"},{"size":1406,"mtime":1637213934765,"results":"18","hashOfConfig":"14"},{"size":2159,"mtime":1637720591256,"results":"19","hashOfConfig":"14"},{"size":1120,"mtime":1637711562417,"results":"20","hashOfConfig":"14"},{"size":109,"mtime":1636703465915,"results":"21","hashOfConfig":"14"},{"size":305,"mtime":1637129014507,"results":"22","hashOfConfig":"14"},{"size":4146,"mtime":1637720634647,"results":"23","hashOfConfig":"14"},{"size":1050,"mtime":1637718454575,"results":"24","hashOfConfig":"14"},{"size":255,"mtime":1637649466274,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ryfszt",{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ictus/project1/notice-board/client/src/index.js",[],"/Users/ictus/project1/notice-board/client/src/App.js",[],"/Users/ictus/project1/notice-board/client/src/components/Selected/Selected.js",[],["53","54"],"/Users/ictus/project1/notice-board/client/src/components/TextEditor/TextEditor.js",["55"],"import React, {useEffect, useState} from 'react';\nimport {CKEditor} from \"@ckeditor/ckeditor5-react\";\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\nimport Axios from \"axios\";\nimport styles from './textEditor.module.css';\n\n\nconst TextEditor = ({isEdit, selected, onCancelClick, onWriteClick}) => {\n    const [newTitle, setNewTitle] = useState({selected})\n    const [content, setContent] = useState()\n\n    // Input Text\n    const onChange = event => {\n        const {name, value} = event.target\n        setContent({...content, [name]:value})\n    }\n\n    // Get Headers\n    const getHeaders = () => {\n        const token = localStorage.getItem('token')\n        return {\n            Authorization: `Bearer ${token}`\n        }\n    }\n\n    // Create\n    const onSubmit = async() => {\n        let data;\n        try {\n            data =await Axios({\n                method:'POST',\n                url: 'http://localhost:8080/boards/insert',\n                data: {\n                    'title': content.title,\n                    'text': content.text,\n\n                },\n                headers: getHeaders()\n            })\n        } catch(error){\n            console.log(error.response.data.message)\n        }\n    }\n    // Edit\n    const onEdit  = (event) => {\n        const {value} = event.target;\n        setNewTitle(value)\n    }\n    const onEditSubmit = () => {\n        setContent({...content},)\n        Axios.post(`http://localhost:8080/boards/edit/${selected.id}`, {\n            title: newTitle,\n            text: content.text,\n        }).then(()=>{\n            window.location.replace('/');\n        })\n    }\n\n    useEffect(()=>{\n        if(isEdit) {\n            setContent({\n                title: selected.title,\n                text: selected.text,\n                createdAt: '',\n            })\n            setNewTitle(selected.title)\n        }\n        else{\n            setContent(selected)\n        }\n    }, [isEdit, selected])\n\n\n    return (\n        <>\n            { isEdit ?\n                // 글 수정\n                <>\n                    <div className={styles.editorContainer}>\n                        <input className={styles.title}  type=\"text\" placeholder='제목을 입력하세요.' value={newTitle || ''} name='title' onChange={onEdit}/>\n                        <CKEditor\n                            editor={ClassicEditor}\n                            data={selected.text}\n                            onChange={(event, editor) => {\n                        const data = editor.getData();\n                        setContent({...content, text: data})\n                    }}\n                        />\n                    </div>\n                    <div className=\"btnContainer\">\n                        <button className={styles.btn} onClick={onEditSubmit}>완료</button>\n                        <button className={styles.btn} onClick={onCancelClick}>취소</button>\n                    </div>\n                </> :\n                // 글 작성\n                <>\n                    <div className={styles.editorContainer}>\n                        <input className={styles.title} type=\"text\" placeholder='제목을 입력하세요.' name='title' onChange={onChange}/>\n                        <CKEditor\n                            editor={ClassicEditor}\n                            data=\"\"\n                            onChange={(event, editor) => {\n                            const data = editor.getData();\n                            setContent({...content, text: data})\n                        }}\n                        />\n                    </div>\n                    <div className=\"btnContainer noBorder\">\n                        <button className={styles.btn} onClick={onSubmit}>작성 완료</button>\n                        <button className={styles.btn} onClick={onWriteClick}>작성 취소</button>\n                    </div>\n                </>}\n        </>\n)};\n\nexport default TextEditor;","/Users/ictus/project1/notice-board/client/src/components/Board/Board.js",[],"/Users/ictus/project1/notice-board/client/src/routes/Home/Home.js",["56"],"/Users/ictus/project1/notice-board/client/src/routes/Read/Read.js",["57"],"import React, {useEffect, useState} from 'react';\nimport {useNavigate, useParams} from \"react-router-dom\";\nimport Selected from \"../../components/Selected/Selected\";\nimport NotFound from \"../NotFound/NotFound\";\nimport styles from './read.module.css';\n\nconst Read = ({viewContent}) => {\n    const [selected, setSelected] = useState({});\n    const [loading, setLoading] = useState(true)\n    const {id} = useParams();\n    const navigate = useNavigate();\n    useEffect(()=>{\n        setSelected(viewContent.find((item)=> item.id === parseInt(id)))\n        setLoading(prev=>!prev)\n\n    },[id, viewContent])\n    //\n    // if(!selected){\n    //     navigate('/')\n    //     window.location.reload()\n    // }\n    \n    return (\n        loading ?\n            <div className={styles.container}>\n                <div className={styles.spinner}>\n                    <div></div>\n                    <div></div>\n                    <div></div>\n                    <div></div>\n                </div>\n            </div>:\n            selected ? <Selected selected={selected}/> :\n                <NotFound />\n    );\n}\n\nexport default Read;","/Users/ictus/project1/notice-board/client/src/routes/NotFound/NotFound.js",[],"/Users/ictus/project1/notice-board/client/src/components/Navigation/Navigation.js",[],"/Users/ictus/project1/notice-board/client/src/components/Auth/Auth.js",[],"/Users/ictus/project1/notice-board/client/src/service/auth.js",[],"/Users/ictus/project1/notice-board/client/src/db/token.js",[],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":30,"column":13,"nodeType":"64","messageId":"65","endLine":30,"endColumn":17},{"ruleId":"66","severity":1,"message":"67","line":33,"column":7,"nodeType":"68","endLine":33,"endColumn":13,"suggestions":"69"},{"ruleId":"62","severity":1,"message":"70","line":11,"column":11,"nodeType":"64","messageId":"65","endLine":11,"endColumn":19},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getBoards'. Either include it or remove the dependency array.","ArrayExpression",["73"],"'navigate' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"74","fix":"75"},"Update the dependencies array to be: [getBoards, user]",{"range":"76","text":"77"},[1077,1083],"[getBoards, user]"]